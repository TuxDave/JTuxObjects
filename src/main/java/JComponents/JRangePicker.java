package JComponents;

import javax.swing.*;
import java.awt.*;

public class JRangePicker extends JDialog {
    private JPanel panel1;
    private JSpinner minSpinner;
    private JSlider minSlider;
    private JSpinner maxSpinner;
    private JSlider maxSlider;
    private JLabel info1;
    private JButton OKButton;

    private int max = 0;
    private int min = 0;

    //START AUTOGENERATED CODE

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        Font panel1Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, panel1.getFont());
        if (panel1Font != null) panel1.setFont(panel1Font);
        minSpinner = new JSpinner();
        Font minSpinnerFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, minSpinner.getFont());
        if (minSpinnerFont != null) minSpinner.setFont(minSpinnerFont);
        panel1.add(minSpinner, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        minSlider = new JSlider();
        Font minSliderFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, minSlider.getFont());
        if (minSliderFont != null) minSlider.setFont(minSliderFont);
        minSlider.setInverted(false);
        minSlider.setPaintLabels(true);
        minSlider.setPaintTicks(true);
        minSlider.setSnapToTicks(true);
        panel1.add(minSlider, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        maxSpinner = new JSpinner();
        Font maxSpinnerFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, maxSpinner.getFont());
        if (maxSpinnerFont != null) maxSpinner.setFont(maxSpinnerFont);
        panel1.add(maxSpinner, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        maxSlider = new JSlider();
        Font maxSliderFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, maxSlider.getFont());
        if (maxSliderFont != null) maxSlider.setFont(maxSliderFont);
        maxSlider.setInverted(false);
        maxSlider.setPaintLabels(true);
        maxSlider.setPaintTicks(true);
        maxSlider.setSnapToTicks(true);
        maxSlider.setValueIsAdjusting(false);
        panel1.add(maxSlider, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        info1 = new JLabel();
        Font info1Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, info1.getFont());
        if (info1Font != null) info1.setFont(info1Font);
        info1.setHorizontalAlignment(0);
        info1.setHorizontalTextPosition(0);
        info1.setText("Range: ");
        panel1.add(info1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        OKButton = new JButton();
        Font OKButtonFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, OKButton.getFont());
        if (OKButtonFont != null) OKButton.setFont(OKButtonFont);
        OKButton.setText("OK!");
        panel1.add(OKButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 12, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("From:");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 12, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("To:");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    //END AUTOGENERATED CODE

    public JRangePicker(int _min, int _max) {
        super();
        if (_min < _max) {
            max = _max;
            min = _min;
        } else {
            throw new IllegalArgumentException("ERROR: The first parameter must be lower then the second!");
        }
        minSpinner.setValue(min);
        minSlider.setMaximum(max);
        minSlider.setMinimum(min);
        minSlider.setValue(min);
        maxSpinner.setValue(max);
        maxSlider.setMaximum(max);
        maxSlider.setMinimum(min);
        maxSlider.setValue(max);
        info1.setText("Range: " + min + "-" + max);
    }

    {//setup frame
        setContentPane(panel1);
        setTitle("Select a Range");
    }
}
